{"version":3,"file":"static/js/881.62d39e80.chunk.js","mappings":"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","sources":["components/core/Loading/index.tsx","components/core/PrivateRoute/index.tsx","env/index.ts","http-request/index.ts","pages/authen/Authen.zustand.ts","pages/merchant/components/MerchantList/MerchantList.services.ts","pages/merchant/components/Merchant/Merchant.tsx","pages/merchant/components/Merchant/index.ts","pages/merchant/components/MerchantList/MerchantList.tsx","pages/merchant/components/MerchantList/MerchantList.hook.ts","pages/merchant/components/MerchantList/index.tsx","pages/merchant/Merchant.tsx","pages/merchant/index.ts"],"sourcesContent":["import React from \"react\";\n\nconst Loading: React.FC<\n  React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLDivElement>,\n    HTMLDivElement\n  > & {\n    className?: string;\n    isCenterAbsolute?: boolean;\n  }\n> = ({ className, isCenterAbsolute, ...rest }) => (\n  <div\n    className={`${\n      isCenterAbsolute && \"h-8 flex items-center justify-center\"\n    } ${className}`}\n    {...rest}\n  >\n    <i className=\"fa-solid fa-spinner fa-spin-pulse fa-xl text-primary-color\" />\n  </div>\n);\nLoading.defaultProps = {\n  className: \"\",\n  isCenterAbsolute: true,\n};\n\nexport default React.memo(Loading);\n","import { useAuthenStore } from \"pages/authen\";\nimport React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\n\nexport interface IPrivateRoute {\n  userRole: \"admin\" | \"customer\";\n  children: React.ReactNode | React.ReactElement | any;\n}\nexport const withPrivateRoute =\n  (Comp: React.FC<IPrivateRoute>) => (props: IPrivateRoute) => {\n    const { isLoggedIn, userInfo } = useAuthenStore();\n    const location = useLocation();\n    if (!isLoggedIn) {\n      return <Navigate to=\"/login\" replace />;\n    }\n    const { children, userRole } = props;\n    if (userRole !== userInfo.role && location.pathname !== \"/\") {\n      return <Navigate to=\"/\" replace />;\n    }\n    return <Comp {...{ ...props }}>{children}</Comp>;\n  };\n\nexport const CustomerRoute = withPrivateRoute((props) => {\n  const { children } = props;\n  return children;\n});\n\nexport const AdminRoute = withPrivateRoute((props) => {\n  const { children } = props;\n  return children;\n});\n","export const ENV = {\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  ASSETS_PATH: `${process.env.PUBLIC_URL || \"\"}/assets`,\n  REACT_APP_API_DOMAIN_URL:\n    process.env.REACT_APP_API_DOMAIN_URL || \"http://localhost:3000/api\",\n  PORT: process.env.PORT || 8080,\n  REACT_APP_WS_PATH: process.env.REACT_APP_WS_PATH || \"\",\n};\n","class HTTP {\n  baseURL: string;\n\n  controller: AbortController;\n\n  requestInit: RequestInit;\n\n  constructor({ baseURL }: { baseURL: string }) {\n    this.baseURL = baseURL;\n    this.controller = new AbortController();\n    this.requestInit = {\n      cache: \"no-cache\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"*\",\n        \"Access-Control-Allow-Headers\": \"*\",\n      },\n      credentials: \"same-origin\", // include, *same-origin, omit\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    };\n  }\n\n  get(url: string) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"GET\",\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  post(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  put(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  patch(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"PATCH\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  delete(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"DELETE\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n}\n\nexport default HTTP;\n","import { UserType } from \"pages/user\";\nimport { createPersistStore } from \"zustand-store\";\n\ninterface AuthenState {\n  isLoggedIn: boolean;\n  userInfo: UserType;\n}\n\ninterface AuthenActions {\n  actionLoggedIn: (user: UserType) => any;\n  actionLogout: () => any;\n}\n\nconst initialState: AuthenState = {\n  isLoggedIn: false,\n  userInfo: {\n    id: \"-1\",\n    username: \"\",\n    password: \"\",\n    role: \"guest\",\n    name: \"\",\n  },\n};\n\nexport const [useAuthenStore] = createPersistStore<AuthenState & AuthenActions>(\n  (set, get) => ({\n    ...initialState,\n    actionLoggedIn: (user) => set({ userInfo: user, isLoggedIn: true }),\n    actionLogout: () => set({ ...initialState }),\n  }),\n  \"useAuthenStore\"\n);\n","import { ENV } from \"env\";\nimport HTTP from \"http-request\";\nimport { MerchantResponse } from \"./MerchantList.typings\";\n\nconst http = new HTTP({ baseURL: `${ENV.REACT_APP_API_DOMAIN_URL}/merchant` });\n\nexport const apiGetMerchantListByCategoryId: (\n  categoryId: string\n) => Promise<MerchantResponse> = (categoryId) =>\n  http.get(`?categoryId=${categoryId}`);\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { MerchantType } from \"./Merchant.typings\";\n\nconst Merchant = React.memo(\n  ({\n    id,\n    imgURL,\n    name,\n    description,\n    stars,\n    reviews,\n    distance,\n    categoryId,\n  }: MerchantType) => (\n    <Link\n      key={id}\n      className=\"merchant grid gap-3 items-center\"\n      to={`/items?merchantId=${id}&categoryId=${categoryId}`}\n    >\n      <img className=\"w-24 h-24\" src={imgURL} alt={name} />\n      <div>\n        <div className=\"text-base font-medium text-primary-dark\">{name}</div>\n        <div className=\"text-sm text-primary-gray mb-1\">{description}</div>\n        <div className=\"text-sm text-primary-gray flex items-center\">\n          <div className=\"text-yellow-400\">\n            <i className=\"fa-solid fa-star\" />\n          </div>\n          <div className=\"text-primary-dark mx-1\">{stars}</div>\n          <div className=\"text-xs\">({reviews})</div>\n          <div className=\"text-primary-dark mx-1 pb-1\">.</div>\n          <div>{distance}</div>\n        </div>\n      </div>\n    </Link>\n  )\n);\n\nexport default React.memo(Merchant);\n","import Merchant from \"./Merchant\";\n\nexport default Merchant;\nexport * from \"./Merchant.typings\";\n","import { useQueryMerchantList } from \"pages/merchant/components/MerchantList/MerchantList.hook\";\nimport { useSearchParams } from \"react-router-dom\";\nimport React from \"react\";\nimport Loading from \"components/core/Loading\";\nimport MerchantItem from \"pages/merchant/components/Merchant\";\nimport \"./MerchantList.styles.scss\";\n\nconst MerchantList: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const categoryId = searchParams.get(\"categoryId\") || \"\";\n  const { isLoading, data: merchantList = [] } = useQueryMerchantList({\n    categoryId,\n  });\n  return (\n    <div className=\"merchant-page p-2\">\n      {isLoading && <Loading />}\n      {merchantList.map((item) => (\n        <MerchantItem key={item.id} {...item} />\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(MerchantList);\n","import { useQuery, UseQueryResult } from \"@tanstack/react-query\";\nimport { MerchantType } from \"pages/merchant/components/Merchant\";\nimport { apiGetMerchantListByCategoryId } from \"./MerchantList.services\";\n\nexport const useQueryMerchantList: ({\n  categoryId,\n}: {\n  categoryId: string | undefined;\n}) => UseQueryResult<MerchantType[], unknown> = ({ categoryId }) => {\n  const query = useQuery({\n    queryFn: async () => {\n      if (!categoryId) {\n        return [];\n      }\n      const res = await apiGetMerchantListByCategoryId(categoryId);\n      return res.data;\n    },\n    queryKey: [\"merchant\", categoryId],\n    enabled: !!categoryId,\n  });\n  return query;\n};\n","import MerchantList from \"./MerchantList\";\n\nexport default MerchantList;\n","import { CustomerRoute } from \"components/core/PrivateRoute\";\nimport React from \"react\";\nimport MerchantList from \"./components/MerchantList\";\n\nconst MerchantPage: React.FC = () => (\n  <div>\n    <MerchantList />\n  </div>\n);\n\nexport default React.memo(() => (\n  <CustomerRoute userRole=\"customer\">\n    <MerchantPage />\n  </CustomerRoute>\n));\n","import MerchantPage from \"./Merchant\";\n\nexport default MerchantPage;\n"],"names":["Loading","className","isCenterAbsolute","rest","defaultProps","React","withPrivateRoute","Comp","props","useAuthenStore","isLoggedIn","userInfo","location","useLocation","to","replace","children","userRole","role","pathname","CustomerRoute","ENV","PUBLIC_URL","process","ASSETS_PATH","REACT_APP_API_DOMAIN_URL","PORT","REACT_APP_WS_PATH","HTTP","baseURL","controller","requestInit","this","AbortController","cache","mode","headers","credentials","redirect","referrerPolicy","url","signal","fetch","method","then","res","json","catch","error","Error","data","body","JSON","stringify","abort","initialState","id","username","password","name","createPersistStore","set","get","actionLoggedIn","user","actionLogout","http","apiGetMerchantListByCategoryId","categoryId","Merchant","imgURL","description","stars","reviews","distance","src","alt","MerchantList","useSearchParams","query","useQuery","queryFn","queryKey","enabled","useQueryMerchantList","isLoading","merchantList","map","item","MerchantPage"],"sourceRoot":""}