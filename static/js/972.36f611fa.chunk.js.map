{"version":3,"file":"static/js/972.36f611fa.chunk.js","mappings":"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","sources":["components/core/PrivateRoute/index.tsx","env/index.ts","http-request/index.ts","pages/admin/components/DashboardOrderPage/DashboardOrderPage.tsx","pages/admin/components/DashboardOrderPage/index.ts","pages/authen/Authen.zustand.ts","database/IndexedDB.ts","pages/order/components/Order/Order.database.ts","pages/order/components/Order/Order.hook.ts","pages/order/components/Order/Order.services.ts"],"sourcesContent":["import { useAuthenStore } from \"pages/authen\";\nimport React from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\n\nexport interface IPrivateRoute {\n  userRole: \"admin\" | \"customer\";\n  children: React.ReactNode | React.ReactElement | any;\n}\nexport const withPrivateRoute =\n  (Comp: React.FC<IPrivateRoute>) => (props: IPrivateRoute) => {\n    const { isLoggedIn, userInfo } = useAuthenStore();\n    const location = useLocation();\n    if (!isLoggedIn) {\n      return <Navigate to=\"/login\" replace />;\n    }\n    const { children, userRole } = props;\n    if (userRole !== userInfo.role && location.pathname !== \"/\") {\n      return <Navigate to=\"/\" replace />;\n    }\n    return <Comp {...{ ...props }}>{children}</Comp>;\n  };\n\nexport const CustomerRoute = withPrivateRoute((props) => {\n  const { children } = props;\n  return children;\n});\n\nexport const AdminRoute = withPrivateRoute((props) => {\n  const { children } = props;\n  return children;\n});\n","export const ENV = {\n  PUBLIC_URL: process.env.PUBLIC_URL || \"\",\n  ASSETS_PATH: `${process.env.PUBLIC_URL || \"\"}/assets`,\n  REACT_APP_API_DOMAIN_URL:\n    process.env.REACT_APP_API_DOMAIN_URL || \"http://localhost:3000/api\",\n  PORT: process.env.PORT || 8080,\n  REACT_APP_WS_PATH: process.env.REACT_APP_WS_PATH || \"\",\n};\n","class HTTP {\n  baseURL: string;\n\n  controller: AbortController;\n\n  requestInit: RequestInit;\n\n  constructor({ baseURL }: { baseURL: string }) {\n    this.baseURL = baseURL;\n    this.controller = new AbortController();\n    this.requestInit = {\n      cache: \"no-cache\",\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Methods\": \"*\",\n        \"Access-Control-Allow-Headers\": \"*\",\n      },\n      credentials: \"same-origin\", // include, *same-origin, omit\n      redirect: \"follow\", // manual, *follow, error\n      referrerPolicy: \"no-referrer\", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    };\n  }\n\n  get(url: string) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"GET\",\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  post(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  put(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  patch(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"PATCH\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  delete(url: string, data?: any) {\n    const { signal } = this.controller;\n    return fetch(`${this.baseURL}/${url}`, {\n      ...this.requestInit,\n      method: \"DELETE\", // *GET, POST, PUT, DELETE, etc.\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\n      signal,\n    })\n      .then((res) => res.json())\n      .catch((error) => {\n        throw new Error(error);\n      });\n  }\n\n  abort() {\n    this.controller.abort();\n  }\n}\n\nexport default HTTP;\n","import { CustomerRoute } from \"components/core/PrivateRoute\";\nimport { useQueryAllOrders } from \"pages/order/components/Order\";\nimport React from \"react\";\n\nconst DashboardOrderPage: React.FC = () => {\n  const { data: orders = [] } = useQueryAllOrders();\n  return (\n    <div>\n      {orders.map((order) => (\n        <div>{order.customerName}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(() => (\n  <CustomerRoute userRole=\"admin\">\n    <DashboardOrderPage />\n  </CustomerRoute>\n));\n","import DashboardOrderPage from \"./DashboardOrderPage\";\n\nexport default DashboardOrderPage;\n","import { UserType } from \"pages/user\";\nimport { createPersistStore } from \"zustand-store\";\n\ninterface AuthenState {\n  isLoggedIn: boolean;\n  userInfo: UserType;\n}\n\ninterface AuthenActions {\n  actionLoggedIn: (user: UserType) => any;\n  actionLogout: () => any;\n}\n\nconst initialState: AuthenState = {\n  isLoggedIn: false,\n  userInfo: {\n    id: \"-1\",\n    username: \"\",\n    password: \"\",\n    role: \"guest\",\n    name: \"\",\n  },\n};\n\nexport const [useAuthenStore] = createPersistStore<AuthenState & AuthenActions>(\n  (set, get) => ({\n    ...initialState,\n    actionLoggedIn: (user) => set({ userInfo: user, isLoggedIn: true }),\n    actionLogout: () => set({ ...initialState }),\n  }),\n  \"useAuthenStore\"\n);\n","import * as idb from \"idb\";\n\nclass IndexedDb {\n  private database: string;\n\n  private db: idb.IDBPDatabase | undefined;\n\n  constructor(database: string) {\n    this.database = database;\n  }\n\n  public async createObjectStore(tableNames: string[]) {\n    this.db = await idb.openDB(this.database, 1, {\n      upgrade(db: idb.IDBPDatabase) {\n        tableNames.forEach((tableName) => {\n          if (!db.objectStoreNames.contains(tableName)) {\n            db.createObjectStore(tableName, {\n              autoIncrement: true,\n              keyPath: \"id\",\n            });\n          }\n        });\n      },\n    });\n    return this;\n  }\n\n  public async getRecord(tableName: string, key: number) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readonly\");\n    const store = tx.objectStore(tableName);\n    const result = await store.get(key);\n    return result;\n  }\n\n  public async getAllRecord(tableName: string) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readonly\");\n    const store = tx.objectStore(tableName);\n    const result = (await store.getAll()) || [];\n    return result;\n  }\n\n  public async addRecord(tableName: string, value: any) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const result = await store.add(value);\n    return result;\n  }\n\n  public async addRecordByKey(tableName: string, value: any, key: number) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const result = await store.add(value, key);\n    return result;\n  }\n\n  public async putBulkRecord(tableName: string, values: any[]) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const result: any[] = values.map((value) => store.add(value));\n    await Promise.all(result);\n    return this.getAllRecord(tableName);\n  }\n\n  public async updateByKey(tableName: string, value: any) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const result = await store.put(value);\n    return result;\n  }\n\n  public async deleteRecord(tableName: string, id: number) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const result = await store.get(id);\n    if (!result) {\n      return result;\n    }\n    await store.delete(id);\n    return id;\n  }\n\n  public async clearTable(tableName: string) {\n    const db = this.db as unknown as idb.IDBPDatabase;\n    const tx = db.transaction(tableName, \"readwrite\");\n    const store = tx.objectStore(tableName);\n    const clear = await store.clear();\n    return clear;\n  }\n}\n\nexport default IndexedDb;\n","import IndexedDb from \"database/IndexedDB\";\nimport { OrderType } from \"./Order.typings\";\n\nexport const TABLE_NAME = \"order\";\n\nexport const DB_NAME = `baemin-${TABLE_NAME}`;\n\nexport const initDatabase = async () => {\n  let indexedDB = new IndexedDb(DB_NAME);\n  const objectStore = [TABLE_NAME];\n  indexedDB = await indexedDB.createObjectStore(objectStore);\n  return indexedDB;\n};\n\nexport const createOrder = async (order: OrderType) => {\n  const dbInstance = await initDatabase();\n  const stored = await dbInstance.addRecord(TABLE_NAME, order);\n  return stored;\n};\n\nexport const researchOrder = async (orderId: number) => {\n  const dbInstance = await initDatabase();\n  const order = await dbInstance.getRecord(TABLE_NAME, orderId);\n  return order;\n};\n\nexport const getAllOrders: () => Promise<OrderType[]> = async () => {\n  const dbInstance = await initDatabase();\n  const orders = await dbInstance.getAllRecord(TABLE_NAME);\n  return orders || [];\n};\n\nexport const updateOrder = async (order: OrderType) => {\n  const dbInstance = await initDatabase();\n  const updated = await dbInstance.updateByKey(TABLE_NAME, {\n    ...order,\n  });\n  return updated;\n};\n\nexport const deleteOrder = async (orderId: number) => {\n  const dbInstance = await initDatabase();\n  const removed = await dbInstance.deleteRecord(TABLE_NAME, orderId);\n  return removed;\n};\n\nexport const clearAllOrder = async () => {\n  const dbInstance = await initDatabase();\n  return dbInstance.clearTable(TABLE_NAME);\n};\n","import {\n  useMutation,\n  UseMutationResult,\n  useQuery,\n  useQueryClient,\n  UseQueryResult,\n} from \"@tanstack/react-query\";\nimport dayjs from \"dayjs\";\nimport { useAuthenStore } from \"pages/authen\";\nimport { CartType } from \"pages/cart/components/Cart\";\nimport { createOrder, getAllOrders } from \"./Order.database\";\nimport { apiCreateNewOrder } from \"./Order.services\";\nimport { OrderType } from \"./Order.typings\";\n\nexport const useMutationCreateOrder: () => UseMutationResult<\n  OrderType,\n  unknown,\n  CartType,\n  unknown\n> = () => {\n  const queryClient = useQueryClient();\n  const mutation = useMutation(\n    async (cart: CartType) => {\n      const response = await apiCreateNewOrder(cart);\n      const order = response.data;\n      await createOrder(order);\n      return order;\n    },\n    {\n      onSuccess: (order) => {\n        // eslint-disable-next-line no-console\n        console.log(\"order here\", order);\n        queryClient.invalidateQueries([\"order-history\"]);\n      },\n    }\n  );\n  return mutation;\n};\n\nexport const useQueryAllOrders: () => UseQueryResult<\n  OrderType[],\n  unknown\n> = () => {\n  const query = useQuery({\n    queryKey: [\"order-history\"],\n    queryFn: () => getAllOrders(),\n  });\n  return query;\n};\n\nexport const useUserOrderList: ({ userId }: { userId: string }) => {\n  orders: OrderType[];\n} = () => {\n  const { userInfo } = useAuthenStore();\n  const { data: orders = [] } = useQueryAllOrders();\n  const ordersFilterByUserId = orders.filter((o) => o.userId === userInfo.id);\n  const ordersSortedByCreatedTime = ordersFilterByUserId.sort((a, b) =>\n    dayjs(a.createdTime).isBefore(b.createdTime) ? 1 : -1\n  );\n  return {\n    orders: ordersSortedByCreatedTime,\n  };\n};\n","import { ENV } from \"env\";\nimport HTTP from \"http-request\";\nimport { CartType } from \"pages/cart/components/Cart\";\nimport {\n  CreateOrderResponseType,\n  UpdateOrderResponseType,\n} from \"./Order.typings\";\n\nconst http = new HTTP({ baseURL: `${ENV.REACT_APP_API_DOMAIN_URL}/order` });\n\nexport const apiCreateNewOrder: (\n  cart: CartType\n) => Promise<CreateOrderResponseType> = (cart) => http.put(\"\", cart);\n\nexport const apiUpdateOrder: (\n  orderId: string,\n  orderInfo: any\n) => Promise<UpdateOrderResponseType> = (orderId, orderInfo) =>\n  http.patch(\"\", { orderId, orderInfo });\n"],"names":["withPrivateRoute","Comp","props","useAuthenStore","isLoggedIn","userInfo","location","useLocation","to","replace","children","userRole","role","pathname","CustomerRoute","ENV","PUBLIC_URL","process","ASSETS_PATH","REACT_APP_API_DOMAIN_URL","PORT","REACT_APP_WS_PATH","HTTP","baseURL","controller","requestInit","this","AbortController","cache","mode","headers","credentials","redirect","referrerPolicy","url","signal","fetch","method","then","res","json","catch","error","Error","data","body","JSON","stringify","abort","DashboardOrderPage","useQueryAllOrders","orders","map","order","customerName","React","initialState","id","username","password","name","createPersistStore","set","get","actionLoggedIn","user","actionLogout","IndexedDb","database","db","tableNames","idb","upgrade","forEach","tableName","objectStoreNames","contains","createObjectStore","autoIncrement","keyPath","key","tx","transaction","store","objectStore","result","getAll","value","add","values","Promise","all","getAllRecord","put","delete","clear","TABLE_NAME","DB_NAME","initDatabase","indexedDB","createOrder","dbInstance","addRecord","stored","getAllOrders","useMutationCreateOrder","queryClient","useQueryClient","mutation","useMutation","cart","apiCreateNewOrder","response","onSuccess","console","log","invalidateQueries","useQuery","queryKey","queryFn","useUserOrderList","filter","o","userId","sort","a","b","dayjs","createdTime","isBefore","http"],"sourceRoot":""}